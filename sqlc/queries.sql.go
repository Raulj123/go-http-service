// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package sqlite

import (
	"context"
)

const getAllEmployees = `-- name: GetAllEmployees :many
SELECT id, name, manager, start_date FROM employees
`

func (q *Queries) GetAllEmployees(ctx context.Context) ([]Employee, error) {
	rows, err := q.db.QueryContext(ctx, getAllEmployees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Employee
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Manager,
			&i.StartDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEmployee = `-- name: GetEmployee :one
SELECT 
    id,
    name,
    manager,
    start_date 
FROM employees 
WHERE id = ?
`

func (q *Queries) GetEmployee(ctx context.Context, id int64) (Employee, error) {
	row := q.db.QueryRowContext(ctx, getEmployee, id)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Manager,
		&i.StartDate,
	)
	return i, err
}

const getEmployeesStartingSoon = `-- name: GetEmployeesStartingSoon :many
SELECT id, name, manager, start_date FROM employees WHERE start_date >= ? AND start_date <= ?
`

type GetEmployeesStartingSoonParams struct {
	StartDate   string
	StartDate_2 string
}

func (q *Queries) GetEmployeesStartingSoon(ctx context.Context, arg GetEmployeesStartingSoonParams) ([]Employee, error) {
	rows, err := q.db.QueryContext(ctx, getEmployeesStartingSoon, arg.StartDate, arg.StartDate_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Employee
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Manager,
			&i.StartDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertEmployee = `-- name: InsertEmployee :one
INSERT INTO employees (id, name, manager, start_date)
VALUES (?, ?, ?, ?)
RETURNING id, name, manager, start_date
`

type InsertEmployeeParams struct {
	ID        int64
	Name      string
	Manager   string
	StartDate string
}

func (q *Queries) InsertEmployee(ctx context.Context, arg InsertEmployeeParams) (Employee, error) {
	row := q.db.QueryRowContext(ctx, insertEmployee,
		arg.ID,
		arg.Name,
		arg.Manager,
		arg.StartDate,
	)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Manager,
		&i.StartDate,
	)
	return i, err
}
